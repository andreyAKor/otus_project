// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Request mocks base method
func (m *MockClient) Request(source string, r *http.Request) (*http.Response, *[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", source, r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*[]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Request indicates an expected call of Request
func (mr *MockClientMockRecorder) Request(source, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockClient)(nil).Request), source, r)
}
